(ns wisp.test.runtime
  (:require [wisp.src.runtime :refer [dictionary? vector? subs str
                                      and or = == > >= < <= + - / *]]
            [wisp.src.sequence :refer [list concat vec]]
            [wisp.src.ast :refer [symbol]]))


(print "test dictionary?")

(assert (not (dictionary? 2)) "2 is not dictionary")
(assert (not (dictionary? [])) "[] is not dictionary")
(assert (not (dictionary? '())) "() is not dictionary")
(assert (dictionary? {}) "{} is dictionary")

(print "test vector?")

(assert (not (vector? 2)) "2 is not vector")
(assert (not (vector? {})) "{} is not vector")
(assert (not (vector? '())) "() is not vector")
(assert (vector? []) "[] is vector")

(assert (=
          '(1 2 3 4 5)
          `(1 ~@'(2 3) 4 ~@'(5))))

(print "subs")

(assert (= "lojure" (subs "Clojure" 1)))
(assert (= "lo" (subs "Clojure" 1 3)))

(print "special functions")

(assert (apply = [1]))
(assert (apply = [1 1]))
(assert (not (apply = [1 2])))
(assert (apply = [1 1 1]))
(assert (not (apply = [1 2 3])))
(assert (apply = [1 1 1 1 1 1]))
(assert (not (apply = [1 1 1 1 2 1])))

(assert (apply == [1]))
(assert (apply == [1 1]))
(assert (not (apply == [1 2])))
(assert (apply == [1 1 1]))
(assert (not (apply == [1 2 3])))
(assert (apply == [1 1 1 1 1 1]))
(assert (not (apply == [1 1 1 1 2 1])))

(assert (apply > [1]))
(assert (apply > [2 1]))
(assert (not (apply > [1 2])))
(assert (not (apply > [1 1])))
(assert (apply > [3 2 1]))
(assert (not (apply > [3 2 4])))
(assert (not (apply > [3 2 2])))
(assert (apply > [5 4 3 2 1 0]))
(assert (not (apply > [5 4 3 2 2 1])))
(assert (not (apply > [5 4 3 2 3 1])))

(assert (apply >= [1]))
(assert (apply >= [2 1]))
(assert (apply >= [2 2]))
(assert (not (apply >= [1 2])))
(assert (apply >= [3 2 1]))
(assert (apply >= [3 2 2]))
(assert (not (apply >= [3 2 4])))
(assert (apply >= [5 4 3 2 2 1 0]))
(assert (not (apply >= [5 4 3 2 0 1])))

(assert (apply < [1]))
(assert (apply < [1 2]))
(assert (not (apply < [2 1])))
(assert (not (apply < [2 2])))
(assert (apply < [1 2 3]))
(assert (not (apply < [3 2 4])))
(assert (not (apply < [3 4 4])))
(assert (apply < [0 1 2 3 4 5]))
(assert (not (apply < [0 1 2 3 4 4])))
(assert (not (apply < [0 1 2 1 4 5])))

(assert (apply <= [1]))
(assert (apply <= [1 2]))
(assert (apply <= [2 2]))
(assert (not (apply <= [2 1])))
(assert (apply <= [1 2 3]))
(assert (apply <= [1 2 2]))
(assert (not (apply <= [4 5 3])))
(assert (apply <= [0 1 2 3 4 5]))
(assert (apply <= [0 1 2 3 4 4]))
(assert (not (apply <= [0 1 2 1 4 5])))

(assert (= 0 (apply + [])))
(assert (= 1 (apply + [1])))
(assert (= 3 (apply + [1 2])))
(assert (= 6 (apply + [1 2 3])))
(assert (= 21 (apply + [1 2 3 4 5 6])))

(assert (= -1 (apply - [1])))
(assert (= 3 (apply - [5 2])))
(assert (= 5 (apply - [10 2 3])))
(assert (= 9 (apply - [30 1 2 3 4 5 6])))

(assert (= 1 (apply * [])))
(assert (= 5 (apply * [5])))
(assert (= 4 (apply * [2 2])))
(assert (= 6 (apply * [1 2 3])))
(assert (= 720 (apply * [1 2 3 4 5 6])))

(assert (= 1 (apply / [1])))
(assert (= 1/2 (apply / [2])))
(assert (= 5/2 (apply / [5 2])))
(assert (= 3 (apply / [6 2])))
(assert (= 5/3 (apply / [10 2 3])))
(assert (= 1/24 (apply / [30 1 2 3 4 5 6])))

(assert (= true (apply and [])))
(assert (= 1 (apply and [1])))
(assert (= 2 (apply and [1 2])))
(assert (= 2 (apply and [5 2])))
(assert (= false (apply and [6 false 2])))
(assert (= nil (apply and [6 4 nil 2])))
(assert (= 3 (apply and [10 2 3])))
(assert (= 6 (apply and [30 1 2 3 4 5 6])))
(assert (= false (apply and [30 1 2 false 3 4 5 6])))
(assert (= 17 (apply and [30 1 2 3 4 5 6 30 1 2 3 4 5 6 17])))

(assert (= nil (apply or [])))
(assert (= 1 (apply or [nil 1])))
(assert (= 1 (apply or [1 nil 2])))
(assert (= 5 (apply or [5 2])))
(assert (= 2 (apply or [nil false 2])))
(assert (= false (apply or [nil nil nil nil nil nil nil nil nil false])))
(assert (= 17 (apply or [nil nil nil nil nil nil nil nil nil nil nil nil nil 17 18])))

(print "test =")

(assert (apply = []))
(assert (apply = [1 1]))
(assert (not (apply = [1 2])))
(assert (not (apply = [1 "1"])))
(assert (not (apply = [1 :1])))
(assert (not (apply = ["b" 'b])))
(assert (apply = [[] []]))
(assert (apply = [[1] [1]]))
(assert (apply = [[1 2] [1 2]]))
(assert (not (apply = [[1 2] [2 1]])))
(assert (not (apply = [[1 2] [1 2 3]])))
(assert (apply = [[1 2 [3 [4 5]]] [1 2 [3 [4 5]]]]))
(assert (apply = [[1 2 [3 [4 5]]] [1 2 [3 [4 5]]] [1 2 [3 [4 5]]]]))
(assert (not (apply = [[1 2 [3 [4 5]]] [1 2 [3 [4 5]]] [1 2 [3 [4 4]]]])))
(assert (apply = [#"foo" #"foo"]))
(assert (not (apply = [#"(?i)foo" #"foo"])))
(assert (not (apply = [#"(?i)foo" #"(?m)foo"])))
(assert (apply = [#"(?i)foo" #"(?i)foo"]))
(assert (apply = [#"(?mi)foo" #"(?im)foo"]))
(assert (not (apply = [#"(?mi)foo" #"(?im)foo" "?(i)foo"])))
(assert (not (apply = [#"foo" "foo"])))
(assert (not (apply = [#"foo" 1])))
(assert (not (apply = ["foo" 1])))
(assert (not (apply = ["foo" ["foo"]])))
(assert (not (apply = ["foo" ["f" "o" "o"]])))
(assert (apply = ['() '()]))
(assert (apply = ['(foo bar) '(foo bar)]))
(assert (not (apply = ['(foo bar) '(bar foo)])))
(assert (not (apply = ['(foo bar) '(foo bar baz)])))
(assert (not (apply = ['(foo bar) '(foo :bar)])))
(assert (not (apply = ['(foo bar) '(foo "bar")])))
(assert (apply = [{} {}]))
(assert (apply = [{:x 1} {:x 1}]))
(assert (not (apply = [{:x 1} {:x 2}])))
(assert (not (apply = [{:x 1} {:x 1 :y 2}])))
(assert (not (apply = [{:x 2 :y 1} {:x 1 :y 2}])))
(assert (apply = [{:x 1 :y 1} {:y 1 :x 1}]))
(assert (not (apply = [{:x 1 :y 2} {:y 1 :x 2}])))
(assert (apply = [{:x 1 :y [2 [3 {:z 4}]]} {:x 1 :y [2 [3 {:z 4}]]}]))
(assert (not (apply = [{:x 1 :y [2 [3 {:z 4}]]} {:x 1 :y [2 [3 {:z 4}]]} {}])))
(assert (apply = [{:x 1 :y [2 [3 {:z 4}]]}
                  {:x 1 :y [2 [3 {:z 4}]]}
                  {:x 1 :y [2 [3 {:z 4}]]}
                  {:x 1 :y [2 [3 {:z 4}]]}]))
